- name: create cron scripts for disk space alert
  lineinfile:   dest=/etc/cron.hourly/90-disk_space_alert
                line='#!/bin/sh'
                insertbefore=BOF
                create=yes
                mode=700
  when: disk_space_alert_percentage >= 0

- name: delete cron scripts for disk space alert
  file: path=/etc/cron.hourly/90-disk_space_alert
        state=absent
  when: disk_space_alert_percentage < 0

- name: write command for disk space alert to cron script
  lineinfile: dest=/etc/cron.hourly/90-disk_space_alert
          line='/opt/admintools/scripts/disk-space-alert-all
                  {{ disk_space_alert_percentage }}'
          regexp=".*disk-space-alert-all.*"
          create=yes
  when: disk_space_alert_percentage >= 0



- name: check if system has non-rotational disk
  set_fact:
    has_non_rotational_disk: "{{
      has_non_rotational_disk | default(false)
      or item.value.rotational | int == 0
    }}"
  with_dict: "{{ ansible_devices }}"
  loop_control:
    label: "{{ item.key }}: {{  'rotational'
                                if item.value.rotational | int == 1
                                else 'non-rotational' }}"

- name: install file system utilities (to get fstrim)
  package:
    name: "{{ item }}"
  with_items:
    - util-linux
  when: has_non_rotational_disk

# yes, I think we need to ``grep_fstrim_units_result`` although we have
# ``has_non_rotational_disk`` because some versions of ``fstrim`` did
# not provide the units IIRC
- name: check for systemd fstrim units
  register: grep_fstrim_units_result
  shell: systemctl list-units --all | grep -v not-found | grep fstrim
  failed_when: grep_fstrim_units_result.rc not in [0, 1]
  changed_when: false

- name: enable (distro-provided units for) regular fstrim
  systemd:
    name: fstrim.timer
    enabled: "{{ has_non_rotational_disk }}"
  when: grep_fstrim_units_result.rc == 0

- name: enable (our units for) regular fstrim
  include_tasks: ../../_include/systemd-unit.yml
  vars:
    name: "{{ item.key }}"
    start: "{{ item.value }}"
    content: "{{ lookup('file', item.key) }}"
    state: "{{ 'present' if has_non_rotational_disk else 'absent' }}"
  with_dict: # unit: start
    fstrim.service: no
    fstrim.timer: yes



- name: get btrfs file system mount points
  register: get_btrfs_mount_points_results
  shell: grep " btrfs " /proc/mounts | cut -d " " -f 2
  failed_when: false
  changed_when: false

- name: un/install btrfs file system utilities
  package:
    name: "{{ 'btrfs-tools' if ansible_distribution == 'Debian' and
                            ansible_distribution_version is version(8, '<=')
              else 'btrfs-progs' }}" 
    state: "{{ 'present' if get_btrfs_mount_points_results.stdout != ''
              else 'absent' }}"

- name: configure systemd units for btrfs maintenance
  include_tasks: ../../_include/systemd-unit.yml
  vars:
    name: "{{ item.key }}"
    start: "{{ item.value }}"
    content: "{{ lookup('file', item.key) }}"
    state: "{{ 'present' if get_btrfs_mount_points_results.stdout != ''
              else 'absent' }}"
  with_dict: # unit: start
    btrfs-balance.service: no
    btrfs-balance.timer: yes
    btrfs-scrub.service: no
    btrfs-scrub.timer: yes

- name: find cache directories of users
  register: find_user_cache_dirs_result
  command: find /home -xdev -maxdepth 2 -type d -name .cache
  changed_when: false

  # network-mounted homes might fail but this task is not important
  # enough to annoy users with failures â€“ show failures but continue
  ignore_errors: true

- name: disable copy-on-write for well-known cache directories
  register: disable_cow_results
  file:
    path: "{{ item }}"
    attributes: +C

  # this task is not crucial and if, e.g., /tmp is mounted as tmpfs, the
  # ioctl is inappropriate etc., so we ignore errors
  ignore_errors: true

  with_flattened:
    - - "/tmp"
      - "/var/tmp"
      - "/var/cache"
      - "/root/.cache"
    - "{{ find_user_cache_dirs_result.stdout_lines }}"
