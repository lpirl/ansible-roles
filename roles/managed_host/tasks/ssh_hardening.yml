# inspired by
# - https://stribika.github.io/2015/01/04/secure-secure-shell.html
# - https://github.com/dev-sec/ansible-ssh-hardening

- name: add comment that this file is managed by ansible
  blockinfile:
    dest: "{{ item }}"
    insertbefore: BOF
    block: |
      # provisioned by
      # https://github.com/lpirl/ansible-roles/blob/master/roles/managed_host/tasks/ssh_hardening.yml
      # (only options are set but the file won't be completely overwritten)
  with_items:
    - /etc/ssh/sshd_config
    - /etc/ssh/ssh_config


# ---------- BEGIN: server and client configuration ----------


- name: normalize configuration file to use spaces instead of tabs between
        configuration keys consisting of more than one word
  replace:
    dest: "{{ item }}"
    regexp: '(.+)\t+(.+)'
    replace: '\1 \2'
  with_items:
    - /etc/ssh/sshd_config
    - /etc/ssh/ssh_config


- name: remove problematically formatted default SSH option
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "(?i)^Subsystem\t"
    state: absent


- name: set SSH options for server
  lineinfile:
    dest: "/etc/ssh/sshd_config"
    line: "{{ item.key }} {{ item.value }}"
    regexp: '(?i)^[#\s]*{{ item.key|regex_escape }}\s.*'
    insertbefore: '^Match\s.*'
  with_dict: "{{
    {} |
    combine(ssh_client_and_server_options) |
    combine(ssh_client_and_server_extra_options | default({})) |
    combine(ssh_server_options) |
    combine(ssh_server_extra_options | default({}))
  }}"
  notify: restart sshd


- name: set SSH options for client
  lineinfile:
    dest: "/etc/ssh/ssh_config"
    line: "{{ item.key }} {{ item.value }}"
    regexp: '(?i)^[#\s]*{{ item.key|regex_escape }}\s.*'
    insertbefore: '^Match\s.*'
  with_dict: "{{
    {} |
    combine(ssh_client_and_server_options) |
    combine(ssh_client_and_server_extra_options | default({})) |
    combine(ssh_client_options) |
    combine(ssh_client_extra_options | default({}))
  }}"


- name: unset deprecated options
  lineinfile:
    dest: "/etc/ssh/{{ item[0] }}_config"
    regexp: '(?i)^[#\s]*{{ item[1]|regex_escape }}\s.*'
    state: absent
  with_nested:
    - [ssh, sshd]
    - "{{ ssh_client_and_server_deprecated_options }}"


- name: determine and configure message authentications codes
  import_tasks: _ssh_hardening-set-algorithm.yml
  vars:
    ssh_query_option: mac
    ssh_config_option: MACs
    preferred_values: "{{ ssh_client_and_server_macs
                          + ssh_client_and_server_extra_macs }}"


- name: determine and configure key exchange methods
  import_tasks: _ssh_hardening-set-algorithm.yml
  vars:
    ssh_query_option: kex
    ssh_config_option: KexAlgorithms
    preferred_values: "{{ ssh_client_and_server_kex
                          + ssh_client_and_server_extra_kex }}"


- name: determine and configure ciphers
  import_tasks: _ssh_hardening-set-algorithm.yml
  vars:
    ssh_query_option: cipher
    ssh_config_option: Ciphers
    preferred_values: "{{ ssh_client_and_server_ciphers
                          + ssh_client_and_server_extra_ciphers }}"

# ---------- END:   server and client configuration ----------


# ---------- BEGIN: host keys ----------

- name: set SSH extra host keys for server
  lineinfile:
    dest: "/etc/ssh/sshd_config"
    line: 'HostKey {{ item }}'
    insertbefore: '^Match\s.*'
  with_items: "{{ ssh_server_extra_host_keys|default([]) }}"


- name: disable bad host key DSA
  lineinfile:
    state: absent
    regexp: '(?i)^\s*HostKey\s.*_dsa_.*'
    dest: '/etc/ssh/sshd_config'
  notify: restart sshd


- name: rename deprecated DSA host key
  register: disable_dsa_host_key_result
  shell: "find /etc/ssh -iname '*_dsa_*' -not -name '*INSECURE*'
          -exec rename -v
          's/(.*)/$1.INSECURE_{{ ansible_date_time.iso8601 }}/' {} \\;"
  changed_when: disable_dsa_host_key_result.stdout != ""
  notify: restart sshd


- name: disable bad host key ECDSA
  block:

    - name: disable bad host key ECDSA
      lineinfile:
        dest: "/etc/ssh/sshd_config"
        regexp: '(?i)^\s*HostKey\s.*_ecdsa_.*'
        state: absent
      notify: restart sshd

    - name: rename deprecated ECDSA host key
      register: disable_ecdsa_host_key_result
      shell: "find /etc/ssh -iname '*_ecdsa_*' -not -name '*INSECURE*'
              -exec rename -v
              's/(.*)/$1.INSECURE_{{ ansible_date_time.iso8601 }}/' {} \\;"
      changed_when: disable_ecdsa_host_key_result.stdout != ""
      notify: restart sshd

  when: not ssh_server_needs_ecdsa_host_key

- name: enable bad host key ECDSA
       (force-enabled through variable ``ssh_server_needs_ecdsa_host_key``)
  block:

    - name: create ECDSA host key
      shell: ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N ""
      args:
        creates: /etc/ssh/ssh_host_ecdsa_key
      notify: restart sshd

    - name: enable good host key Ed25519
      lineinfile:
        dest: "/etc/ssh/sshd_config"
        line: "HostKey /etc/ssh/ssh_host_ecdsa_key"
        state: present
      notify: restart sshd

  when: ssh_server_needs_ecdsa_host_key


- name: create Ed25519 host key
  shell: ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ""
  args:
    creates: /etc/ssh/ssh_host_ed25519_key
  notify: restart sshd


- name: enable good host key Ed25519
  lineinfile:
    dest: "/etc/ssh/sshd_config"
    line: "HostKey /etc/ssh/ssh_host_ed25519_key"
  notify: restart sshd



- name: check RSA host key length
  register: check_rsa_host_key_length
  shell: '[ `ssh-keygen -lf /etc/ssh/ssh_host_rsa_key.pub
             | cut -d" " -f1` -lt 4096 ]'
  changed_when: false
  failed_when: false


- name: disable insecure RSA host key (too short)
  register: disable_rsa_host_key_result
  shell: "find /etc/ssh -iname '*_rsa_*' -not -name '*INSECURE*'
          -exec rename -v
          's/(.*)/$1.INSECURE_{{ ansible_date_time.iso8601 }}/' {} \\;"
  changed_when: disable_rsa_host_key_result.stdout != ""
  when: check_rsa_host_key_length.rc == 0
  notify: restart sshd


- name: (re-)create RSA host key
  shell: ssh-keygen -t rsa -b 8192 -f /etc/ssh/ssh_host_rsa_key -N ""
  args:
    creates: /etc/ssh/ssh_host_rsa_key
  notify: restart sshd


- name: enable good host key RSA
  lineinfile:
    dest: "/etc/ssh/sshd_config"
    line: "HostKey /etc/ssh/ssh_host_rsa_key"
  notify: restart sshd

# ---------- END: host keys ----------


# ---------- BEGIN: files and permissions ----------

- name: enforce permissions for .ssh directory of {{ ansible_user_id }}
  file:
    dest: "{{ansible_user_dir}}/.ssh"
    mode: u+rX,go-rwx
    state: directory
    recurse: yes


- name: get home directory of
        {{ ansible_env.SUDO_USER|default("[n.a.]") }}
  register: sudo_user_home
  shell: echo ~${SUDO_USER}
  when: ansible_env.SUDO_USER is defined
  changed_when: false


- name: enforce permissions for .ssh directory of
        {{ ansible_env.SUDO_USER|default("[n.a.]") }}
  file:
    dest: "{{sudo_user_home.stdout}}/.ssh"
    mode: u+rX,go-rwx
    state: directory
    recurse: yes
  when: ansible_env.SUDO_USER is defined

# ---------- END:   files and permissions ----------
